name: Auto Setup On PR Open

on:
  pull_request:
    types:
      - opened

jobs:
  setup_pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: read

    steps:
      - name: Set assignees
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request: pr, repository } = context.payload;
            const author = pr.user.login;

            await github.rest.issues.addAssignees({
              owner: repository.owner.login,
              repo: repository.name,
              issue_number: pr.number,
              assignees: [author],
            });

      - name: Set labels
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request: pr, repository } = context.payload;
            const branch = pr.head.ref.toLowerCase();
            const author = pr.user.login;
            
            const anTeam = ['medAndro', 'ijh1298', 'jiyuneel'];
            const beTeam = ['jjunh0', 'Starlight258', 'bowook', 'nourzoo'];
            
            const branchLabelMap = {
            'feat/': '🚀 feat',
            'fix/': '🔨 fix',
            'refactor/': '🔧 refactor',
            'style/': '💈 style',
            'design/': '🎀 design',
            'chore/': '⚙️ chore',
            'test/': '💯 test',
            'docs/': '📄 docs',
            'deploy/': '🔫 deploy'
            };
            
            const branchPrefix = Object.keys(branchLabelMap).find(p => branch.startsWith(p));
            const authorLabel = anTeam.includes(author) ? '🤖 AN' : beTeam.includes(author) ? '🐒 BE' : null;
            
            const labels = new Set();
            if (branchPrefix) labels.add(branchLabelMap[branchPrefix]);
            if (authorLabel) labels.add(authorLabel);
            
            if (labels.size) {
            await github.rest.issues.addLabels({
            owner: repository.owner.login,
            repo: repository.name,
            issue_number: pr.number,
            labels: Array.from(labels),
            });
            }

      - name: Set reviewers
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request: pr, repository } = context.payload;
            const author = pr.user.login;

            const anTeam = ['medAndro', 'ijh1298', 'jiyuneel'];
            const beTeam = ['jjunh0', 'Starlight258', 'bowook', 'nourzoo'];

            const isAuthorAN = anTeam.includes(author);
            const isAuthorBE = beTeam.includes(author);

            const reviewers = (isAuthorAN ? anTeam : isAuthorBE ? beTeam : []).filter(r => r !== author);

            if (reviewers.length) {
              await github.rest.pulls.requestReviewers({
                owner: repository.owner.login,
                repo: repository.name,
                pull_number: pr.number,
                reviewers,
              });
            }

      - name: Set Project
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const { pull_request: pr } = context.payload;
            const projectNodeId = 'PVT_kwDOA_44FM4A9Rfj';
            const statusFieldId = 'PVTSSF_lADOA_44FM4A9RfjzgxBhLM';
            const inprogressOptionId = '47fc9ee4';

            const addItemResponse = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `, {
              projectId: projectNodeId,
              contentId: pr.node_id,
            });

            const itemId = addItemResponse.addProjectV2ItemById.item.id;

            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item { id }
                }
              }
            `, {
              projectId: projectNodeId,
              itemId,
              fieldId: statusFieldId,
              optionId: inprogressOptionId,
            });

      - name: Set milestone
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request: pr, repository } = context.payload;
            const today = new Date();

            const milestones = await github.paginate('GET /repos/' + repository.owner.login + '/' + repository.name + '/milestones', {
              state: 'open'
            });

            const milestone = milestones.find(m => {
              if (!m.due_on) return false;
              const startDate = new Date(m.created_at);
              const dueDate = new Date(m.due_on);
              return startDate <= today && today <= dueDate;
            });

            if (milestone) {
              await github.request('PATCH /repos/' + repository.owner.login + '/' + repository.name + '/issues/' + pr.number, {
                milestone: milestone.number
              });
            }
