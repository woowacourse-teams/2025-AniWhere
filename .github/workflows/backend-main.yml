name: Release & Deploy (Auto SemVer)

on:
  push:
    branches: [ "chore/356" ]
#on:
#  pull_request_target:
#    types: [ closed ]
#    branches: [ "main" ]   # 운영 브랜치로 조정

env:
  IMAGE: yagubogu/yagubogu-backend

jobs:
  release:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.semver.outputs.next_version }}     # 1.0.1
      ver_tag: ${{ steps.ver.outputs.ver_tag }}             # v1.0.1
      digest: ${{ steps.capture.outputs.digest }}          # sha256:...
      img_tag: ${{ steps.alias.outputs.image_tag }}         # v1.0.1-abcdef12
    steps:
      - name: Checkout (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_DEPLOY_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DEPLOY_TOKEN }}

      - name: Ensure dev-latest exists
        run: docker buildx imagetools inspect $IMAGE:dev-latest > /dev/null

      - id: semver
        name: Decide bump from PR labels -> compute next version
        shell: bash
        run: |
          set -euo pipefail
          labels_raw="$(jq -r '.pull_request.labels[].name' <<< '${{ toJson(github.event) }}' || true)"
          labels="$(sed -E 's/^[^[:alnum:]]+[ ]*//;t;:a;s/^[^[:alnum:]]+[ ]*//;ta' <<<"$labels_raw")"
          if   grep -qi '^semver:major$' <<<"$labels"; then bump="major"
          elif grep -qi '^semver:minor$' <<<"$labels"; then bump="minor"
          else bump="patch"; fi

          git fetch --tags --force
          last_tag="$(git tag -l --sort=-v:refname | grep -E '^(v)?[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 || true)"
          last_tag="${last_tag#v}"
          [ -n "$last_tag" ] || last_tag="0.0.0"
          IFS='.' read -r MA MI PA <<<"$last_tag"

          case "$bump" in
            major) MA=$((MA+1)); MI=0; PA=0;;
            minor) MI=$((MI+1)); PA=0;;
            patch) PA=$((PA+1));;
          esac
          next="$MA.$MI.$PA"
          echo "next_version=$next" >> "$GITHUB_OUTPUT"

      - id: ver
        name: Export v-prefixed VER
        shell: bash
        run: |
          set -euo pipefail
          VER="v${{ steps.semver.outputs.next_version }}"
          echo "VER=$VER" >> "$GITHUB_ENV"
          echo "ver_tag=$VER" >> "$GITHUB_OUTPUT"

      - id: capture
        name: Capture image digest of dev-latest
        shell: bash
        run: |
          set -euo pipefail
          DIGEST=""
          # 레지스트리 전파 지연 대비(최대 10회, 3초 간격)
          for i in {1..10}; do
            DIGEST="$(docker buildx imagetools inspect "$IMAGE:dev-latest" | sed -n 's/^Digest:[[:space:]]*//p' | head -n1 || true)"
            [ -n "$DIGEST" ] && break
            echo "waiting manifest... ($i/10)"; sleep 3
          done
          [ -n "$DIGEST" ] || { echo "Digest not found for $IMAGE:dev-latest" >&2; exit 1; }
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
          echo "Captured digest: $DIGEST"

      - id: alias
        name: Create readable alias tag <VER>-<short>
        shell: bash
        run: |
          set -euo pipefail
          DIGEST="$(docker buildx imagetools inspect "$IMAGE:dev-latest" | sed -n 's/^Digest:[[:space:]]*//p' | head -n1)"
          SHORT="${DIGEST#sha256:}"
          SHORT="${SHORT:0:8}"
          READABLE="v${{ steps.semver.outputs.next_version }}-${SHORT}"
          docker buildx imagetools create \
            -t "$IMAGE:$READABLE" \
            "$IMAGE:dev-latest"
          echo "image_tag=$READABLE" >> "$GITHUB_OUTPUT"
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"

  cd:
    needs: release
    runs-on: [ self-hosted, production ]
    env:
      IMAGE: yagubogu/yagubogu-backend
      VERSION: ${{ needs.release.outputs.version }}   # 1.0.1
      VER: ${{ needs.release.outputs.ver_tag }}   # v1.0.1
      DIGEST: ${{ needs.release.outputs.digest }}    # sha256:
      IMG_TAG: ${{ needs.release.outputs.img_tag }}   # v1.0.1-abcdef12
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_DEPLOY_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DEPLOY_TOKEN }}

      - name: Pull by digest (pinned)
        run: docker pull "$IMAGE@${DIGEST}"

      - name: Ensure network
        run: docker network create yagubogu-net 2>/dev/null || true

      - name: Blue-Green deploy (pinned by digest)
        shell: bash
        run: |
          set -euo pipefail
          BLUE="yagubogu-backend-blue"
          GREEN="yagubogu-backend-green"

          if docker ps --format '{{.Names}}' | grep -qx "$BLUE"; then
            OLD="$BLUE";  NEW="$GREEN"; PORT=8082; COLOR=green
          else
            OLD="$GREEN"; NEW="$BLUE";  PORT=8081; COLOR=blue
          fi
          echo "OLD=${OLD:-none}, NEW=$NEW, PORT=$PORT, COLOR=$COLOR"

          if docker ps -a --format '{{.Names}}' | grep -qx "$NEW"; then
            docker rm -f "$NEW" || true
          fi

          docker run -d \
            --name "$NEW" \
            --network yagubogu-net \
            -p "$PORT:8080" \
            --stop-signal=SIGTERM \
            --stop-timeout=30 \
            -v /var/log/yagubogu:/var/log/yagubogu \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e DB_URL="${{ secrets.DB_PROD_URL }}" \
            -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
            -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            -l app=yagubogu-backend \
            -l release.version="${VER}" \
            -l release.digest="${DIGEST}" \
            -l release.alias="${IMG_TAG}" \
            "$IMAGE@${DIGEST}"

          # Health check (exit if failed)
          sleep 10;
          healthy=false
          for i in {1..30}; do
            if curl -fsS "http://127.0.0.1:$PORT/actuator/health" >/dev/null; then
              echo "NEW healthy"; healthy=true; break;
            fi
            echo "waiting health... ($i/30)"; sleep 2
          done

          if [ "$healthy" != true ]; then
            echo "Health check failed after 30 attempts. Aborting deploy." >&2
            docker logs "$NEW" || true
            docker rm -f "$NEW" || true
            exit 1
          fi

          if [ "$COLOR" = "blue" ]; then
            TARGET="/etc/nginx/sites-available/yagubogu-blue.conf"
          else
            TARGET="/etc/nginx/sites-available/yagubogu-green.conf"
          fi
          sudo ln -sf "$TARGET" /etc/nginx/sites-enabled/app.conf
          sudo nginx -t
          sudo nginx -s reload

          sleep 20

          if [ -n "${OLD:-}" ] && docker ps --format '{{.Names}}' | grep -qx "$OLD"; then
            docker stop --time=30 "$OLD" || true
          fi

          LOG_DIR="/var/log/yagubogu"
          sudo mkdir -p "$LOG_DIR"
          echo "$(date -Is) release=${VER} version=${VERSION} digest=${DIGEST} alias=${IMG_TAG} color=${COLOR} port=${PORT}" \
            | sudo tee -a "$LOG_DIR/deployments.log"
          echo "${VER} ${VERSION} ${DIGEST} ${IMG_TAG} ${COLOR} ${PORT}" | sudo tee "$LOG_DIR/current.release" >/dev/null

      - name: Prune old images (local)
        shell: bash
        run: docker image prune -af || true
