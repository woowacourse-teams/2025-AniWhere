name: YaguBogu Backend Main

on:
  push:
    branches: [ "chore/356" ]
    paths:
      - "backend/**"
  workflow_dispatch:

env:
  IMAGE: yagubogu/yagubogu-backend

jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_DEPLOY_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DEPLOY_TOKEN }}

      # dev 빌드 산출물 존재 확인 (없으면 실패 처리 or 빌드 fallback)
      - name: Ensure dev image exists
        run: |
          set -e
          docker buildx imagetools inspect $IMAGE:dev-${{ github.sha }} > /dev/null

      # dev-${SHA} → prod-${SHA}, prod-latest 승급 (재빌드/재푸시 없음)
      - name: Promote dev tag to prod tags
        run: |
          docker buildx imagetools create \
            -t $IMAGE:prod-${{ github.sha }} \
            -t $IMAGE:prod-latest \
            $IMAGE:dev-${{ github.sha }}

  cd:
    needs: promote
    runs-on: [ self-hosted, production ]
    env:
      IMAGE: yagubogu/yagubogu-backend
      TAG: prod-${{ github.sha }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_DEPLOY_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DEPLOY_TOKEN }}

      - name: Pull Docker image
        run: |
          docker pull $IMAGE:$TAG

      - name: Ensure network
        run: docker network create yagubogu-net 2>/dev/null || true

      - name: Deploy new container (Blue-Green with drain & graceful)
        shell: bash
        run: |
          set -euo pipefail

          BLUE="yagubogu-backend-blue"
          GREEN="yagubogu-backend-green"

          # 현재 살아있는 컨테이너를 OLD로 간주
          if docker ps --format '{{.Names}}' | grep -qx "$BLUE"; then
            OLD="$BLUE";  NEW="$GREEN"; PORT=8082
          else
            OLD="$GREEN"; NEW="$BLUE";  PORT=8081
          fi
          echo "OLD=${OLD:-none}, NEW=$NEW, PORT=$PORT"

          # 같은 이름이 잔존 상태이면 제거(이전 실패 잔재 방지)
          if docker ps -a --format '{{.Names}}' | grep -qx "$NEW"; then
            docker rm -f "$NEW" || true
          fi

          # NEW 기동 (★ graceful 종료 옵션 포함)
          docker run -d \
            --name "$NEW" \
            --network yagubogu-net \
            -p "$PORT:8080" \
            --restart unless-stopped \
            --stop-signal=SIGTERM \
            --stop-timeout=30 \
            -v /var/log/yagubogu:/var/log/yagubogu \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e DB_URL="${{ secrets.DB_PROD_URL }}" \
            -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
            -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            -e GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
            -e ACCESS_TOKEN_SECRET_KEY="${{ secrets.ACCESS_TOKEN_SECRET_KEY }}" \
            -e REFRESH_TOKEN_SECRET_KEY="${{ secrets.REFRESH_TOKEN_SECRET_KEY }}" \
            "$IMAGE:$TAG"

          # 헬스체크 (최대 60초) ★ 실패 시 즉시 중단
          ok=""
          for i in {1..30}; do
            if curl -fsS "http://127.0.0.1:$PORT/actuator/health" >/dev/null; then
              echo "NEW healthy"
              ok=1
              break
            fi
            echo "waiting health... ($i/30)"
            sleep 2
          done
          if [ -z "${ok}" ]; then
            echo "NEW failed to become healthy"
            docker logs "$NEW" || true
            exit 1
          fi

          # (선택) 워밍업
          curl -fsS "http://127.0.0.1:$PORT/" >/dev/null || true

          # 드레인 대기 ★ 진행 중 요청 마무리 시간
          sleep 20

          # OLD graceful 종료 ★ 시간 보장
          if [ -n "${OLD:-}" ] && docker ps --format '{{.Names}}' | grep -qx "$OLD"; then
            echo "Gracefully stopping $OLD"
            docker stop --time=30 "$OLD" || true
            docker rm "$OLD" || true
          fi

      - name: Docker image Prune
        run: docker image prune -af || true
